# -*- coding: utf-8 -*-
"""Exercise: QA Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/169jdkYD7uh0Yt73Du7aoAEnrg_pp2upq
"""

!pip install -q transformers datasets evaluate

import torch
from transformers import AutoTokenizer, AutoModelForQuestionAnswering, TrainingArguments, Trainer
from datasets import load_dataset

# Load the SQuAD dataset
data = load_dataset("squad")

# Load the pretrained model and tokenizer
model_checkpoint = "distilbert-base-uncased"
tokenizer = AutoTokenizer.from_pretrained(model_checkpoint)
model = AutoModelForQuestionAnswering.from_pretrained(model_checkpoint)

# Define tokenization function
def preprocess_function(examples):
    tokenized_examples = tokenizer(
        examples["question"],
        examples["context"],
        truncation="only_second",
        max_length=384,
        stride=128,
        return_overflowing_tokens=True,
        return_offsets_mapping=True,
        padding="max_length",
    )

    sample_mapping = tokenized_examples.pop("overflow_to_sample_mapping")
    offset_mapping = tokenized_examples.pop("offset_mapping")

    start_positions = []
    end_positions = []

    for i, offsets in enumerate(offset_mapping):
        input_ids = tokenized_examples["input_ids"][i]
        cls_index = input_ids.index(tokenizer.cls_token_id)

        sequence_ids = tokenized_examples.sequence_ids(i)
        sample_index = sample_mapping[i]
        answers = examples["answers"][sample_index]

        if len(answers["answer_start"]) == 0:
            start_positions.append(cls_index)
            end_positions.append(cls_index)
        else:
            start_char = answers["answer_start"][0]
            end_char = start_char + len(answers["text"][0])

            token_start_index = 0
            while sequence_ids[token_start_index] != 1:
                token_start_index += 1

            token_end_index = len(input_ids) - 1
            while sequence_ids[token_end_index] != 1:
                token_end_index -= 1

            if not (offsets[token_start_index][0] <= start_char and offsets[token_end_index][1] >= end_char):
                start_positions.append(cls_index)
                end_positions.append(cls_index)
            else:
                while token_start_index < len(offsets) and offsets[token_start_index][0] <= start_char:
                    token_start_index += 1
                start_positions.append(token_start_index - 1)

                while offsets[token_end_index][1] >= end_char:
                    token_end_index -= 1
                end_positions.append(token_end_index + 1)

    tokenized_examples["start_positions"] = start_positions
    tokenized_examples["end_positions"] = end_positions
    return tokenized_examples

# Preprocess the dataset
train_dataset = data["train"].map(preprocess_function, batched=True, remove_columns=data["train"].column_names)
validation_dataset = data["validation"].map(preprocess_function, batched=True, remove_columns=data["validation"].column_names)

# Define training arguments
training_args = TrainingArguments(
    output_dir="./qa_model",
    evaluation_strategy="epoch",
    learning_rate=2e-5,
    per_device_train_batch_size=16,
    per_device_eval_batch_size=16,
    num_train_epochs=3,
    weight_decay=0.01,
    save_strategy="epoch",
    logging_dir="./logs",
    logging_steps=500,
    push_to_hub=False,
    report_to="none"
)

# Initialize the Trainer
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_dataset,
    eval_dataset=validation_dataset,
    tokenizer=tokenizer,
)

# Train the model
trainer.train()

# Save the model
trainer.save_model("./qa_model")

# Evaluate the model
eval_results = trainer.evaluate()
print("Evaluation Results:", eval_results)

"""# Save Model"""

model.save_pretrained("qa-trained-model")
tokenizer.save_pretrained("qa-trained-model")

"""# Load & Test Model"""

# Load the model and tokenizer
model = AutoModelForQuestionAnswering.from_pretrained("qa-trained-model")
tokenizer = AutoTokenizer.from_pretrained("qa-trained-model")

context = "Hugging Face is a technology company based in New York and Paris."
question = "Where is Hugging Face based?"

# Tokenize the input
inputs = tokenizer.encode_plus(
    question,
    context,
    return_tensors="pt",
    truncation=True
)

outputs = model(**inputs)
start_logits = outputs.start_logits
end_logits = outputs.end_logits

# Get the start and end token positions
start_idx = torch.argmax(start_logits)
end_idx = torch.argmax(end_logits)

# Decode the tokens to get the answer
answer = tokenizer.convert_tokens_to_string(
    tokenizer.convert_ids_to_tokens(inputs['input_ids'][0][start_idx:end_idx+1])
)

print("Question:", question)
print("Answer:", answer)